name: CI

on:
  push:
    tags-ignore: ['*']
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.rs'
      - .github/workflows/ci.yml
  pull_request:
  schedule: [cron: "0 0 * * *"]
  workflow_dispatch:


permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - run: cargo test

  build:
    name: build ${{matrix.job.name}}
    runs-on: ${{matrix.job.os}}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "macOS-arm64",        os: "macOS-latest",   target: "aarch64-apple-darwin",           use-cross: true }
          - { name: "macOS-amd64",        os: "macOS-latest",   target: "x86_64-apple-darwin",                            }
          - { name: "windows-amd64",      os: "windows-latest", target: "x86_64-pc-windows-msvc",                         }
          - { name: "windows-aarch64",    os: "windows-latest", target: "aarch64-pc-windows-msvc",        use-cross: true }
          - { name: "linux-gnu",          os: "ubuntu-latest",  target: "x86_64-unknown-linux-gnu",                       }
          - { name: "linux-musl",         os: "ubuntu-latest",  target: "x86_64-unknown-linux-musl",      use-cross: true }
          - { name: "linux-aarch64-gnu",  os: "ubuntu-latest",  target: "aarch64-unknown-linux-gnu",      use-cross: true }
          - { name: "linux-aarch64-musl", os: "ubuntu-latest",  target: "aarch64-unknown-linux-musl",     use-cross: true }
          - { name: "linux-arm-gnu",      os: "ubuntu-latest",  target: "arm-unknown-linux-gnueabi",      use-cross: true }
          - { name: "linux-arm-musl",     os: "ubuntu-latest",  target: "arm-unknown-linux-musleabihf",   use-cross: true }
          - { name: "linux-armv7-gnu",    os: "ubuntu-latest",  target: "armv7-unknown-linux-gnueabihf",  use-cross: true }
          - { name: "linux-armv7-musl",   os: "ubuntu-latest",  target: "armv7-unknown-linux-musleabihf", use-cross: true }
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        name: Cache Cargo registry
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - uses: actions/cache@v4
        if: startsWith(matrix.job.name, 'linux-')
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('.github/workflows/ci.yml') }}
      - uses: dtolnay/rust-toolchain@stable
        name: Set Rust toolchain
        with:
          targets: ${{ matrix.job.target }}
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          # NB: sets CARGO_BUILD_TARGET evar - do not need --target flag in build
          target: ${{ matrix.job.target }}
      - uses: taiki-e/install-action@cross
        if: ${{ matrix.job.use-cross }}

      - name: Installing needed Ubuntu dependencies
        if: matrix.job.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get -y update
          case ${{ matrix.job.target }} in
            arm*-linux-*) sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-*-linux-*) sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Build
        run: cargo build --target=${{ matrix.job.target }} --locked

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - run: cargo clippy

  formatting:
    name: Formatting
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - run: cargo fmt --check

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/install@cargo-outdated
      - run: cargo outdated
