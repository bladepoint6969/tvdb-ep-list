name: CI

on:
  push:
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.rs'
  pull_request:
  schedule: [cron: "0 0 * * *"]
  workflow_dispatch:


permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - run: cargo test

  build:
    name: build
    runs-on: ${{matrix.job.os}}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "macOS-arm64",        os: "macOS-latest",   target: "aarch64-apple-darwin",           artifact_suffix: "macos-arm64",     use-cross: true                          }
          - { name: "macOS-amd64",        os: "macOS-latest",   target: "x86_64-apple-darwin",            artifact_suffix: "macos"                                                     }
          - { name: "windows-amd64",      os: "windows-latest", target: "x86_64-pc-windows-msvc",         artifact_suffix: "windows"                                                   }
          - { name: "linux-gnu",          os: "ubuntu-latest",  target: "x86_64-unknown-linux-gnu",       artifact_suffix: "linux"                                                     }
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        name: Cache Cargo registry
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - uses: actions/cache@v3
        if: startsWith(matrix.job.name, 'linux-')
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('.github/workflows/ci.yml') }}
      - name: Installing needed x86_64 toolchain for MacOS
        if: matrix.job.os == 'macOS-latest'
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            x86_64-apple-darwin) rustup target add x86_64-apple-darwin ;;
          esac

      - name: Build
        run: cargo build --release --verbose --target=${{ matrix.job.target }} --locked

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - run: cargo clippy

  formatting:
    name: Formatting
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - run: cargo fmt --check

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/install@cargo-outdated
      - run: cargo outdated
